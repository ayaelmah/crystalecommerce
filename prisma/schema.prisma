generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  clerkId   String
  imgUrl    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cart      Cart?
  Favorite  Favorite[]
  orders    Order[]
  Review    Review[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String?
  featured    Boolean     @default(false)
  categoryId  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  CartItem    CartItem[]
  Favorite    Favorite?
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  Review      Review[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalAmount Float
  status      String      @default("PENDING")
  fullName    String
  email       String
  phone       String
  Country     String
  City        String
  zip         String
  street      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  name      String
  productId Int
  imgUrl    String
  quantity  Int     @default(1)
  price     Int
  stock     Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int      @unique
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
