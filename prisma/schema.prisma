generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  email     String    @unique
  name      String?
  cart      Cart?
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id        String    @id @default(cuid())
  name      String
  featured  Boolean @default(false)
  description String
  price     Float
  stock     Int
  height    Float
  width     Float
  color     String
  category  Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  OrderItem OrderItem[]

  CartItem CartItem[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String    @id @default(cuid())
  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  items     OrderItem[]
  total     Float
  status    String    @default("Pending") 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model OrderItem {
  id        String    @id @default(cuid())
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  price     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}